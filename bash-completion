#
# Copyright (c) 2017-2018,2023 GaÃ«l PORTAY
#
# SPDX-License-Identifier: LGPL-2.1-or-later
#

_domake()
{
	local cur prev words cword
	_init_completion -s || return

	case $prev in
	--shell)
		if [[ $COMPLETION_NODOMAKE ]]; then
			_filedir
			return
		fi

		local shells dockerfile directory
		dockerfile=Dockerfile
		directory=.
		# before we scan for shells, see if a path to dockerfile was
		# specified with --dockerfile and if the directory is to be
		# changed with -C or --directory
		for (( i=0; i < ${#words[@]}; i++ )); do
			if [[ ${words[i]} == --dockerfile ]]; then
				# eval for tilde expansion
				eval dockerfile=( "${words[i+1]}" )
			elif [[ ${words[i]} =~ ^(-C|--directory)$ ]]; then
				# eval for tilde expansion
				eval directory=( "${words[i+1]}" )
			fi
		done

		shells="$(DOSH_NOBUILD=1 dosh --directory "$directory" --dockerfile "$dockerfile" --shell /bin/sh -c 'grep -v \# /etc/shells' 2>/dev/null)"
		COMPREPLY=( $( compgen -W "$shells" -- "$cur" ) )
		return
		;;
	--dockerfile)
		_filedir
		return
		;;
	-C|--directory)
		_filedir -d
		return
		;;
	esac

	COMP_WORDS=("${MAKE:-make}" "${COMP_WORDS[@]:2}" "$cur")
	COMP_LINE="${COMP_WORDS[*]}"
	COMP_POINT="${#COMP_LINE}"
	_command_offset 0

	local short_opts="-C"
	local long_opts="--dockerfile --directory --shell --version --help"
	COMPREPLY+=( $( compgen -W "$short_opts $long_opts" -- "$cur" ) )

} &&
complete -F _domake domake
